# -*- coding: utf-8 -*-
"""week_1_assignment_4_updated.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_1OEph4BEYi8o0z7X_u2846vn8LoeU0n
"""

def binary_search_position(numbers, target):
    def inner_search(inner_low, inner_high):
        inner_mid = (inner_low + inner_high)//2
        if target == numbers[inner_mid]:
            return inner_mid
        elif inner_low == inner_high:
            return -1
        elif inner_high -1 == inner_mid:
            return -1
        elif target > numbers[inner_high] or target < numbers[inner_low]:
            return -1
        elif target > numbers[inner_mid]:
            return inner_search(inner_mid, inner_high)
        elif target < numbers[inner_mid]:
            return inner_search(inner_low, inner_mid)
        else:
            return -1
        
    high = -1
    for i in numbers:
        high += 1
    mid = (high + 1 )//2
    
    if target == numbers[mid]:
        return mid
    elif target == numbers[high]:
        return high
    elif target == numbers[0]:
        return 0
    elif target > numbers[high] or target < numbers[0]:
        return -1
    elif target > numbers[mid]:
        return inner_search(mid, high)
    elif target < numbers[mid]:
        return inner_search(0, mid)

import random
x = [1, 2, 3, 5, 6, 7, 8, 9, 12, 13, 14, 16, 19, 21, 22, 24, 25, 40, 42, 98, 99, 100]
for i in range(20):
    y = random.choice(x)
    try:
        z = binary_search_position(x,y)
        print(z, x.index(y),x[z],y)
    except:
        print(z,y)

